package anagrams

import (
	"embed"
	"encoding/json"
	"sort"
)

// The sigmap.json file needs to be part of the executable generated by
// go build or go install
//
//go:embed sigmap.json
var resources embed.FS

// Search looks up all subsets of a word at least the specified length.
// Parameters:
//  1. word - the search word
//  2. length - the lower limit of the anagram length (default 3)
//
// Returns:
//  1. An array of strings with the anagrams found
//  2. An error object (or nil)
func Search(word string, length int) ([]string, error) {

	// Start loading the dictionary
	loaded := make(chan error)
	sigmap := make(map[string][]string)

	go loadDictionary(loaded, &sigmap)

	// Wait for dictionary load to complete
	err := <-loaded
	if err != nil {
		return nil, err
	}

	// Examine all subsets of the word of sufficient length (command line option)
	// and store them in a map
	outset := make(map[string]int)
	subsets := AllSubsets(word, length)
	for _, subset := range subsets {

		// Compute the subset's signature
		signature := SignatureOf(subset)

		// Look up all words with the same signature
		list, ok := sigmap[signature]
		if ok {
			for _, newWord := range list {
				outset[newWord] += 1
			}
		}
	}

	// Sort the output set and return it as an array of strings
	keys := make([]string, 0, len(outset))
	for key := range outset {
		keys = append(keys, key)
	}
	sort.Strings(keys)
	return keys, nil
}

// Loads the signature map
func loadDictionary(loaded chan error, pSigmap *map[string][]string) {
	jsonBytes, err := resources.ReadFile("sigmap.json")
	if err != nil {
		loaded <- err
		return
	}
	err = json.Unmarshal(jsonBytes, pSigmap)
	loaded <- err
}
